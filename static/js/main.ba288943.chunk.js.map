{"version":3,"sources":["components/MovieResults.js","components/SearchMovies.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["MovieResults","props","movies","data","pages","Math","ceil","totalResults","useState","currPage","setPage","query","setQuery","movie","setMovie","showMovie","setShowMovie","handleSearchTitle","title","fetchAPI","a","url","process","fetch","then","response","json","movieData","catch","error","console","Promise","reject","className","Response","Search","map","index","Year","replace","onClick","Title","pageOptions","i","push","setPages","page","pageNum","search","e","target","Poster","src","alt","Genre","Released","Runtime","Director","Plot","SearchMovies","setMovies","showMovies","setShowMovies","navigate","useNavigate","useSearchParams","searchParams","handleSearch","useCallback","log","preventDefault","useEffect","get","onSubmit","type","id","value","placeholder","onChange","required","p","handlePageSelected","Home","href","routes","App","useRoutes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yUAkHeA,EA/GM,SAACC,GAClB,IAAMC,EAASD,EAAME,KACfC,EAAQC,KAAKC,KAAKJ,EAAOK,aAAe,IAE9C,EAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAoB,SAACC,GACvBN,EAASM,GAXe,mCAYxBC,IAZwB,4CAe5B,4BAAAC,EAAA,6DAEQC,EAFR,qCAE4CV,EAF5C,mBAE4DW,YAF5D,SAIUC,MAAMF,GACPG,MAAK,SAAAC,GAEF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAIF,OAFAb,EAASa,GACTX,GAAa,GACNW,KAEVC,OAAM,SAAAC,GAEH,OADAC,QAAQD,MAAM,UAAWA,GAClBE,QAAQC,OAAOH,MAjBlC,4CAf4B,sBAmD5B,OACI,sBAAKI,UAAU,gBAAf,UAE4B,UAApB/B,EAAOgC,UAAgD,IAAxBhC,EAAOK,aAChC,sBAAM0B,UAAU,kBAAhB,oDACA,sBAAKA,UAAU,eAAf,UACE,uBAAMA,UAAU,kBAAhB,4BAAkD/B,EAAOK,gBACzD,qBAAK0B,UAAU,aAAf,SACK/B,EAAOiC,OAAOC,KAAI,SAACvB,EAAOwB,GAEZxB,EAAMyB,KAAKC,QAAQ,MAAO,IACrC,OAAO,sBAAKC,QAAS,kBAAMvB,EAAkBJ,EAAM4B,QAAQR,UAAU,kBAA9D,UAEH,sBAAMA,UAAU,mBAAhB,SAAoCpB,EAAM4B,QAC1C,uBAAMR,UAAU,kBAAhB,eAAqCpB,EAAMyB,UAHxC,UAAwFzB,EAAM4B,MAA9F,YAAuGJ,YASlI,qBAAKJ,UAAU,UAAf,SAnCS,WAEb,IADA,IAAIS,EAAc,GACTC,EAAI,EAAGA,GAAKvC,EAAOuC,IACxBD,EAAYE,KAAKD,GAErB,OAAOD,EAgCKG,GAAWT,KAAI,SAAAU,GACX,OAAO,sBAA0Bb,UAAWa,IAASrC,EAAW,oBAAsB,aAAc+B,QAAS,kBA7B7H9B,EADcqC,EA8B8HD,QA5B5I7C,EAAM+C,OAAOD,GAFA,IAACA,GA8BS,SAA6HD,GAA7H,cAAkBA,SAKjC/B,GAAa,qBAAKkB,UAAU,gBAAgBO,QAAS,SAACS,GAAD,MAA8B,kBAAvBA,EAAEC,OAAOjB,WAAiCjB,GAAa,IAAtG,SACT,sBAAKiB,UAAU,YAAf,UACI,qBAAKA,UAAU,aAAf,SACI,sBAAMA,UAAU,QAAQO,QAAS,kBAAMxB,GAAa,IAApD,iBAEJ,sBAAKiB,UAAU,oBAAf,UAEQpB,EAAMsC,QAA2B,QAAjBtC,EAAMsC,QAAoB,qBAAKC,IAAKvC,EAAMsC,OAAQE,IAAG,2BAAsBxC,EAAM4B,SAErG,sBAAKR,UAAU,cAAf,UACI,qBAAKA,UAAU,QAAf,SAAwBpB,EAAM4B,QAE1B5B,EAAMyC,OAAyB,QAAhBzC,EAAMyC,OAAmB,mBAAGrB,UAAU,QAAb,SAAsBpB,EAAMyC,QAGpEzC,EAAM0C,UAA+B,QAAnB1C,EAAM0C,UAAsB,oBAAGtB,UAAU,WAAb,uBAAmCpB,EAAM0C,YAGvF1C,EAAM2C,SAA6B,QAAlB3C,EAAM2C,SAAqB,mBAAGvB,UAAU,UAAb,SAAwBpB,EAAM2C,UAG1E3C,EAAM4C,UAA+B,QAAnB5C,EAAM4C,UAAsB,oBAAGxB,UAAU,WAAb,uBAAmCpB,EAAM4C,YAEzF5C,EAAM6C,MAAuB,QAAf7C,EAAM6C,MAAkB,mBAAGzB,UAAU,OAAb,SAAqBpB,EAAM6C,sB,OC5BpFC,MAxEf,WACI,MAA4BnD,mBAAS,IAArC,mBAAON,EAAP,KAAe0D,EAAf,KACA,EAA0BpD,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KACA,EAAwBtD,mBAAS,GAAjC,mBAAOsC,EAAP,KAAapC,EAAb,KACMqD,EAAWC,cACjB,EAAwCC,cAAxC,mBAAOC,EAAP,KAEMC,GAFN,KAEqBC,uBAAY,SAACnB,GAAM,4CAGpC,4BAAA7B,EAAA,6DAEQC,EAFR,qCAE4CV,EAF5C,iBAE0DmC,EAF1D,mBAEyExB,YAFzE,SAIUC,MAAMF,GACXG,MAAK,SAAAC,GAEF,OAAOA,EAASC,UAEnBF,MAAK,SAAArB,GASF,OAPAyD,EAAUzD,GACV2D,GAAc,GACdC,EAAS,YAAD,OAAapD,IAErBmB,QAAQuC,IAAI,iBAGLlE,KAEVyB,OAAM,SAAAC,GAEH,OADAC,QAAQD,MAAM,UAAWA,GAClBE,QAAQC,OAAOH,MAtB9B,4CAHoC,sBAEpCoB,GAAKA,EAAEqB,iBAF6B,mCA4BpCnD,KACD,CAACR,EAAOmC,KAoBX,OAbAyB,qBAAU,YAEDV,GAAcK,GAAgBA,EAAaM,IAAI,MAAiC,IAAzBN,EAAaM,IAAI,MAAcN,EAAaM,IAAI,OAAS7D,GACjHC,EAASsD,EAAaM,IAAI,MAE9B1C,QAAQuC,IAAI,SAAU1D,EAAOuD,EAAaM,IAAI,OAG1CN,EAAaM,IAAI,MAAQ7D,IACzBwD,MAEL,CAACxD,EAAOuD,EAAcL,EAAYM,IAGjC,sBAAKlC,UAAU,eAAf,UACI,sBAAMA,UAAU,cAAhB,8CACA,sBAAMwC,SAAUN,EAAhB,SACI,sBAAKlC,UAAU,YAAf,UAEI,uBAAOyC,KAAK,SAASC,GAAG,aAAaC,MAAOjE,EAAOsB,UAAU,cACzD4C,YAAY,uBAAuBC,SAAU,SAAA7B,GAAC,OAAIrC,EAASqC,EAAEC,OAAO0B,QAAQG,UAAQ,IACxF,sBAAM9C,UAAU,aAAaO,QAAS2B,EAAtC,+BAGNN,GAAc,cAAC,EAAD,CAAc1D,KAAMD,EAAQ8C,OAAQ,SAACgC,GAAD,OA5BjC,SAACA,GACxBtE,EAAQsE,GA2BuDC,CAAmBD,QAVhD,iB,MC3D3B,SAASE,IAGpB,OACI,gCACI,mBAAGjD,UAAU,OAAOkD,KAAK,IAAzB,0BACA,cAAC,EAAD,IACA,sBAAMlD,UAAU,iBAAhB,+CCHZ,IAAMmD,EAAS,CACb,IAAK,kBAAM,cAAC,EAAD,KACX,UAAW,kBAAM,cAAC,EAAD,MAsBJC,MAnBf,WAEE,OADoBC,oBAAUF,GAE5B,qBAAKnD,UAAU,MAAf,SAKE,cAAC,IAAD,UACA,cAAC,EAAD,SCVSsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjE,MAAK,YAAkD,IAA/CkE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.ba288943.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './MovieResults.css';\n\nconst MovieResults = (props) => {\n    const movies = props.data\n    const pages = Math.ceil(movies.totalResults / 10)\n    // const [pages, setPages] = useState([])\n    const [currPage, setPage] = useState(1)\n    const [query, setQuery] = useState(\"\")\n    // variables for selected movie data\n    const [movie, setMovie] = useState([])\n    const [showMovie, setShowMovie] = useState(false)\n\n    const handleSearchTitle = (title) => {\n        setQuery(title) \n        fetchAPI()\n    }\n\n    async function fetchAPI() {\n        // url for fetching json data of selected movie from OMDb api with user input and api key\n        let url = `https://www.omdbapi.com/?t=${query}&apikey=${process.env.REACT_APP_API_KEY}`\n        // make get request (default) to movie api\n        await fetch(url)\n            .then(response => { // get Promise for json body of http response (not loaded yet)\n                // parse json into JavaScript object (anything represented by json e.g. array, string, etc)\n                return response.json()\n            })\n            .then(movieData => { // get response of previous resolved (successful) promise after awaiting json body\n                // store returned json body of movie search results\n                setMovie(movieData) \n                setShowMovie(true)\n                return movieData\n            })\n            .catch(error => { // catch network error or when response is invalid JSON\n                console.error('Error: ', error)\n                return Promise.reject(error)\n            })\n    }\n\n    const setPages = () => {\n        let pageOptions = []\n        for (let i = 1; i <= pages; i++) {\n            pageOptions.push(i)\n        }\n        return pageOptions\n    }\n\n    const loadPage = (pageNum) => { \n        setPage(pageNum) \n        props.search(pageNum)\n    }\n\n    // include a \"show more\" button to view more tahn 10 results at a time\n    // useful for filtering by time range\n    return (\n        <div className=\"resultSection\">\n            { // display movie results if more than 1 result found\n                movies.Response === \"False\" || movies.totalResults === 0\n                    ? <span className=\"searchResultVal\">No movies found -- try another search!</span>\n                    : <div className=\"movieResults\">\n                        <span className=\"searchResultVal\">Total results: {movies.totalResults}</span>\n                        <div className=\"searchList\">\n                            {movies.Search.map((movie, index) => {\n                                // uses regex to handle cases when year has non-numeric values, such as \"2011-\"\n                                let year = movie.Year.replace(/\\D/g, '');\n                                return <div onClick={() => handleSearchTitle(movie.Title)} className=\"searchMovieItem\" key={`${movie.Title} ${index}`}>\n                                    {/* { movie.Poster && movie.Poster !== \"N/A\" && <span><img src={movie.Poster} alt={`Movie poster for ${movie.Title}`} /> </span>} */}\n                                    <span className=\"searchMovieTitle\">{movie.Title}</span>\n                                    <span className=\"searchMovieYear\">, {movie.Year}</span>\n                                </div>\n                            })}\n                        </div>\n                    </div>\n            }\n            <div className=\"pageBar\">\n                { \n                    setPages().map(page => {\n                        return <span key={`page${page}`} className={page === currPage ? \"active pageOption\" : \"pageOption\"} onClick={() => loadPage(page)}>{page}</span>                        \n                    })\n                }\n            </div>\n            {\n                showMovie && <div className=\"selectedMovie\" onClick={(e) => e.target.className === \"selectedMovie\" && setShowMovie(false)}>\n                    <div className=\"movieItem\">\n                        <div className=\"closeMovie\">\n                            <span className=\"close\" onClick={() => setShowMovie(false)}>x</span>\n                        </div>\n                        <div className=\"moviePosterDetail\">\n                            { // display movie poster if available (not null or N/A)\n                                movie.Poster && movie.Poster !== \"N/A\" && <img src={movie.Poster} alt={`Movie poster for ${movie.Title}`} />\n                            }\n                            <div className=\"movieDetail\">\n                                <div className=\"title\">{movie.Title}</div>\n                                {\n                                    movie.Genre && movie.Genre !== \"N/A\" && <p className=\"genre\">{movie.Genre}</p>\n                                }\n                                { // check each movie detail exists (not null or empty string) before showing\n                                    movie.Released && movie.Released !== \"N/A\" && <p className=\"released\">Released: {movie.Released}</p>\n                                }\n                                {\n                                    movie.Runtime && movie.Runtime !== \"N/A\" && <p className=\"runtime\">{movie.Runtime}</p>\n                                }\n                                {\n                                    movie.Director && movie.Director !== \"N/A\" && <p className=\"director\">Director: {movie.Director}</p>\n                                }\n                                { movie.Plot && movie.Plot !== \"N/A\" && <p className=\"plot\">{movie.Plot}</p>}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\nexport default MovieResults;","import React, { useEffect, useState, useCallback } from 'react';\nimport './SearchMovies.css';\nimport MovieResults from './MovieResults';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nfunction SearchMovies() {\n    const [movies, setMovies] = useState([])\n    const [query, setQuery] = useState(\"\")\n    const [showMovies, setShowMovies] = useState(false)\n    const [page, setPage] = useState(1)\n    const navigate = useNavigate()\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const handleSearch = useCallback((e) => {\n        // cancel default submit action of form \n        e && e.preventDefault()\n        async function fetchAPI() {\n            // url for fetching json data from OMDb api with user input and api key\n            let url = `https://www.omdbapi.com/?s=${query}&page=${page}&apikey=${process.env.REACT_APP_API_KEY}`\n            // make get request (default) to movie api\n            await fetch(url)\n            .then(response => { // get Promise for json body of http response (not loaded yet)\n                // parse json into JavaScript object (anything represented by json e.g. array, string, etc)\n                return response.json()\n            })\n            .then(data => { // get response of previous resolved (successful) promise after awaiting json body\n                // store returned json body of movie search results\n                setMovies(data) \n                setShowMovies(true)\n                navigate(`search?q=${query}`)\n                // setSearchParams(query)\n                console.log('handle search')\n                // find number of pages\n                // handlePageOptions() \n                return data\n            })\n            .catch(error => { // catch network error or when response is invalid JSON\n                console.error('Error: ', error) \n                return Promise.reject(error)\n            })\n        }    \n        fetchAPI()\n    }, [query, page])\n\n\n    const handlePageSelected = (p) => {\n        setPage(p)\n    }\n\n    useEffect(() => {\n        // set input query to url query\n        if (!showMovies && searchParams && searchParams.get('q') && searchParams.get('q') != \"\" && searchParams.get('q') !== query) {\n            setQuery(searchParams.get('q'))\n        }\n        console.log('query ', query, searchParams.get('q'))\n\n        // load result if search query exists\n        if (searchParams.get('q') || query) {\n            handleSearch()\n        }\n    }, [query, searchParams, showMovies, handleSearch])\n\n    return (\n        <div className=\"searchMovies\" key=\"searchMovies\">\n            <span className=\"searchTitle\">Search for your favorite movies!</span>\n            <form onSubmit={handleSearch}>\n                <div className=\"searchBar\">\n                {/* <label htmlFor=\"movieInput\" className=\"searchLabel\">Search:</label> */}\n                    <input type=\"search\" id=\"movieInput\" value={query} className=\"searchInput\" \n                        placeholder=\"Enter movie title...\" onChange={e => setQuery(e.target.value)} required/>\n                    <span className=\"searchIcon\" onClick={handleSearch}>🔍</span>\n                </div>\n            </form>\n            { showMovies && <MovieResults data={movies} search={(p) => handlePageSelected(p)}/> } \n        </div>\n    )\n} \nexport default SearchMovies;","import React, { useState } from 'react';\nimport './Home.css'\nimport SearchMovies from './SearchMovies'\n\nexport default function Home() {\n    // add movies on landing page\n    \n    return (\n        <div>\n            <a className=\"home\" href=\"/\">🎬</a>\n            <SearchMovies /> \n            <span className=\"featuredMovies\">Featured movies coming soon...</span>\n        </div>\n    )\n}","//import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport { BrowserRouter, Switch, Router, Route, Link } from \"react-router-dom\";\nimport { useRoutes, A } from \"hookrouter\";\nimport SearchMovies from './components/SearchMovies';\nimport Home from './components/Home'\n\nconst routes = {\n  \"/\": () => <Home />,\n  \"/search\": () => <SearchMovies />\n}\n\nfunction App() {\n  const routeResult = useRoutes(routes);\n  return (\n    <div className=\"App\">\n      {/* <Router> */}\n        {/* <header className=\"App-header\">\n            <span className=\"App-logo\">🎞👓📽🎥</span>\n        </header> */}\n      <BrowserRouter>\n      <Home/>\n        {/* <SearchMovies /> */}\n      </BrowserRouter>\n      {/* <A href=\"/\">Home</A> */}\n      {/* {routeResult} */}\n      {/* </Router> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}