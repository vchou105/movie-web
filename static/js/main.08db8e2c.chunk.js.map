{"version":3,"sources":["logo.svg","components/MovieResults.js","components/SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieResults","data","movies","useState","movie","setMovie","showMovie","setShowMovie","query","a","url","process","fetch","then","response","json","movieData","catch","error","console","Promise","reject","className","Response","totalResults","Search","map","onClick","handleSearchTitle","Title","Year","Poster","src","alt","Genre","Released","Runtime","Director","Plot","SearchMovies","setMovies","setQuery","showMovies","setShowMovies","onSubmit","e","preventDefault","fetchAPI","htmlFor","type","id","value","placeholder","onChange","target","required","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08db8e2c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport './MovieResults.css';\r\n\r\nconst MovieResults = (data) => {\r\n    const movies = data.data\r\n    // variables for selected movie data\r\n    const [movie, setMovie] = useState([])\r\n    const [showMovie, setShowMovie] = useState(false)\r\n\r\n    async function handleSearchTitle(query) {\r\n        // url for fetching json data of selected movie from OMDb api with user input and api key\r\n        let url = `http://www.omdbapi.com/?t=${query}&apikey=${process.env.REACT_APP_API_KEY}`\r\n        // make get request (default) to movie api\r\n        await fetch(url)\r\n            .then(response => { // get Promise for json body of http response (not loaded yet)\r\n                // parse json into JavaScript object (anything represented by json e.g. array, string, etc)\r\n                return response.json()\r\n            })\r\n            .then(movieData => { // get response of previous resolved (successful) promise after awaiting json body\r\n                // store returned json body of movie search results\r\n                setMovie(movieData)\r\n                setShowMovie(true)\r\n                return movieData\r\n            })\r\n            .catch(error => { // catch network error or when response is invalid JSON\r\n                console.error('Error: ', error)\r\n                return Promise.reject(error)\r\n            })\r\n    }\r\n\r\n    // include a \"show more\" button to view more tahn 10 results at a time\r\n    // useful for filtering by time range\r\n    return (\r\n        <div className=\"movieResults\">\r\n            { // display movie results if more than 1 result found\r\n                movies.Response === \"False\" || movies.totalResults == 0\r\n                    ? <span className=\"searchResultVal\">No movies found -- try another search!</span>\r\n                    : <div className=\"resultSection\">\r\n                        <span className=\"searchResultVal\">Total results: {movies.totalResults}</span>\r\n                        <div className=\"searchList\">\r\n                            { movies.Search.map(movie => {\r\n                                // display each movie detail\r\n                                return <div onClick={() => handleSearchTitle(movie.Title)} className=\"searchMovieItem\">\r\n                                    <span className=\"searchMovieTitle\">{movie.Title}</span>\r\n                                    <span className=\"searchMovieYear\">, {movie.Year}</span>\r\n                                </div>\r\n                                // return <div className=\"movieItem\">\r\n                                //     <img src={movie.Poster} alt={`Movie poster for ${movie.Title}`} />\r\n                                //     <div className=\"movieDetail\">\r\n                                //         <div className=\"title\">{movie.Title}</div>\r\n                                //         <p>Released: {movie.Released}</p>\r\n                                //         <p>{movie.Genre}</p>\r\n                                //         <p>Director: {movie.Director}</p>\r\n                                //         <p>{movie.Runtime}</p>\r\n                                //         <p>{movie.Plot}</p>\r\n                                //     </div>\r\n                                // </div> \r\n                            })} </div>\r\n                    </div>\r\n\r\n            }\r\n            {\r\n                showMovie\r\n                    ? <div className=\"selectedMovie\">\r\n                        <div className=\"movieItem\">\r\n                            <span className=\"close\" onClick={() => setShowMovie(false)}>x</span>\r\n                            { // display movie poster if available (not null or empty string)\r\n                                movie.Poster && movie.Poster != \"\" && <img src={movie.Poster} alt={`Movie poster for ${movie.Title}`} />\r\n                            }\r\n                            <div className=\"movieDetail\">\r\n                                <div className=\"title\">{movie.Title}</div>\r\n                                {\r\n                                    movie.Genre && movie.Genre != \"\" && <p className=\"genre\">{movie.Genre}</p>\r\n                                }\r\n                                { // check each movie detail exists (not null or empty string) before showing\r\n                                    movie.Released && movie.Released != \"\" && <p className=\"released\">Released: {movie.Released}</p>\r\n                                }\r\n                                {\r\n                                    movie.Runtime && movie.Runtime != \"\" && <p className=\"runtime\">{movie.Runtime}</p>\r\n                                }                                \r\n                                {\r\n                                    movie.Director && movie.Director != \"\" && <p className=\"director\">Director: {movie.Director}</p>\r\n                                }\r\n                                <p className=\"plot\">{movie.Plot}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default MovieResults;","import React, { useState } from 'react';\r\nimport './SearchMovies.css';\r\nimport MovieResults from './MovieResults';\r\n\r\nfunction SearchMovies() {\r\n    const [movies, setMovies] = useState([])\r\n    const [query, setQuery] = useState(\"\")\r\n    const [showMovies, setShowMovies] = useState(false)\r\n\r\n    function handleSearch(e) {\r\n        // cancel default submit action of form \r\n        e.preventDefault()\r\n        async function fetchAPI() {\r\n            // url for fetching json data from OMDb api with user input and api key\r\n            let url = `http://www.omdbapi.com/?s=${query}&apikey=${process.env.REACT_APP_API_KEY}`\r\n            // make get request (default) to movie api\r\n            await fetch(url)\r\n            .then(response => { // get Promise for json body of http response (not loaded yet)\r\n                // parse json into JavaScript object (anything represented by json e.g. array, string, etc)\r\n                return response.json()\r\n            })\r\n            .then(data => { // get response of previous resolved (successful) promise after awaiting json body\r\n                // store returned json body of movie search results\r\n                setMovies(data) \r\n                setShowMovies(true)\r\n                return data\r\n            })\r\n            .catch(error => { // catch network error or when response is invalid JSON\r\n                console.error('Error: ', error) \r\n                return Promise.reject(error)\r\n            })\r\n        }\r\n        \r\n        fetchAPI()\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchMovies\">\r\n            <span className=\"searchTitle\">Search for your favorite movies!</span>\r\n            <form onSubmit={handleSearch}>\r\n                <label htmlFor=\"movieInput\" className=\"\">🎬🔎: </label>\r\n                <input type=\"search\" id=\"movieInput\" value={query} className=\"searchInput\" \r\n                    placeholder=\"Search movie title...🔍\" onChange={e => setQuery(e.target.value)} required/>\r\n            </form>\r\n            { showMovies ? <MovieResults data={movies}/> : null} \r\n        </div>\r\n    )\r\n} \r\nexport default SearchMovies;","import logo from './logo.svg';\nimport './App.css';\nimport SearchMovie from './components/SearchMovies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n          <span className=\"App-logo\">🎞👓📽🎥</span>\n      </header> */}\n      <SearchMovie/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}